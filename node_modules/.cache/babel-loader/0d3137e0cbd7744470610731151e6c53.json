{"remainingRequest":"/Users/theogilardo/Desktop/weather-app/node_modules/babel-loader/lib/index.js!/Users/theogilardo/Desktop/weather-app/node_modules/eslint-loader/index.js??ref--13-0!/Users/theogilardo/Desktop/weather-app/src/store/index.js","dependencies":[{"path":"/Users/theogilardo/Desktop/weather-app/src/store/index.js","mtime":1594633051000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/theogilardo/Desktop/weather-app/src/store/index.js"],"names":["Vue","Vuex","use","Store","state","cityWeather","minMaxTemp","cityFavorites","showFavorites","showFavoritesBtn","getters","getMinMaxTemp","getCityWeather","getShowFavorites","getShowFavoritesBtn","getCityFavorites","mutations","setCelsius","forEach","el","temperature","main","setFahrenheit","refreshCities","JSON","parse","localStorage","getItem","setCityWeather","payload","setminMaxTemp","addCityFavorite","newFavCity","name","location","country","img","image","push","setItem","stringify","setShowFavorites","setShowFavoritesBtn","length","removeCityFavorite","city","filter","actions","fetchCityWeather","commit","fetch","response","json","data","weatherArr","days","responseImg","dataImg","cityImg","results","urls","raw","list","timestamp","dateApiFormatted","dt_txt","substring","dayIndex","Date","getDay","weekDay","listAllDays","map","day","listDay","Set","minMaxList","i","findCurrentDayArr","minValue","temp_min","sort","a","b","maxValue","temp_max","mixMaxDay","min","Math","trunc","max","element","index","setTime","date","hours","getHours","minutes","getMinutes","substr","sunrise","sunset","temp","minmax","highlight","weather","description","id","pressure","humidity","cloudCoverage","clouds","all","windSpeed","wind","speed","sunTime","icon","alert","modules"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACE,KAAT,CAAe;AAC5BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE,EADR;AAELC,IAAAA,UAAU,EAAE,EAFP;AAGLC,IAAAA,aAAa,EAAE,EAHV;AAILC,IAAAA,aAAa,EAAE,KAJV;AAKLC,IAAAA,gBAAgB,EAAE;AALb,GADqB;AAQ5BC,EAAAA,OAAO,EAAE;AACPC,IAAAA,aADO,yBACOP,KADP,EACc;AACnB,aAAOA,KAAK,CAACE,UAAb;AACD,KAHM;AAIPM,IAAAA,cAJO,0BAIQR,KAJR,EAIe;AACpB,aAAOA,KAAK,CAACC,WAAb;AACD,KANM;AAOPQ,IAAAA,gBAPO,4BAOUT,KAPV,EAOiB;AACtB,aAAOA,KAAK,CAACI,aAAb;AACD,KATM;AAUPM,IAAAA,mBAVO,+BAUaV,KAVb,EAUoB;AACzB,aAAOA,KAAK,CAACK,gBAAb;AACD,KAZM;AAaPM,IAAAA,gBAbO,4BAaUX,KAbV,EAaiB;AACtB,aAAOA,KAAK,CAACG,aAAb;AACD;AAfM,GARmB;AAyB5BS,EAAAA,SAAS,EAAE;AACTC,IAAAA,UADS,sBACEb,KADF,EACS;AAChBA,MAAAA,KAAK,CAACC,WAAN,CAAkBa,OAAlB,CACE,UAACC,EAAD;AAAA,eAASA,EAAE,CAACC,WAAH,CAAeC,IAAf,GAAuB,CAACF,EAAE,CAACC,WAAH,CAAeC,IAAf,GAAsB,EAAvB,IAA6B,CAA9B,GAAmC,CAAlE;AAAA,OADF;AAGD,KALQ;AAMTC,IAAAA,aANS,yBAMKlB,KANL,EAMY;AACnBA,MAAAA,KAAK,CAACC,WAAN,CAAkBa,OAAlB,CACE,UAACC,EAAD;AAAA,eAASA,EAAE,CAACC,WAAH,CAAeC,IAAf,GAAuBF,EAAE,CAACC,WAAH,CAAeC,IAAf,GAAsB,CAAvB,GAA4B,CAA5B,GAAgC,EAA/D;AAAA,OADF;AAGD,KAVQ;AAWTE,IAAAA,aAXS,yBAWKnB,KAXL,EAWY;AACnBA,MAAAA,KAAK,CAACG,aAAN,GAAsBiB,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,eAArB,CAAX,CAAtB;AACD,KAbQ;AAcTC,IAAAA,cAdS,0BAcMxB,KAdN,EAcayB,OAdb,EAcsB;AAC7BzB,MAAAA,KAAK,CAACC,WAAN,GAAoBwB,OAApB;AACD,KAhBQ;AAiBTC,IAAAA,aAjBS,yBAiBK1B,KAjBL,EAiBYyB,OAjBZ,EAiBqB;AAC5BzB,MAAAA,KAAK,CAACE,UAAN,GAAmBuB,OAAnB;AACD,KAnBQ;AAoBTE,IAAAA,eApBS,2BAoBO3B,KApBP,EAoBc;AACrB,UAAM4B,UAAU,GAAG;AACjBC,QAAAA,IAAI,EAAE7B,KAAK,CAACC,WAAN,CAAkB,CAAlB,EAAqB6B,QAArB,CAA8BD,IADnB;AAEjBE,QAAAA,OAAO,EAAE/B,KAAK,CAACC,WAAN,CAAkB,CAAlB,EAAqB6B,QAArB,CAA8BC,OAFtB;AAGjBC,QAAAA,GAAG,EAAEhC,KAAK,CAACC,WAAN,CAAkB,CAAlB,EAAqBgC;AAHT,OAAnB;AAMAjC,MAAAA,KAAK,CAACG,aAAN,CAAoB+B,IAApB,CAAyBN,UAAzB;AAEAN,MAAAA,YAAY,CAACa,OAAb,CACE,eADF,EAEEf,IAAI,CAACgB,SAAL,CAAepC,KAAK,CAACG,aAArB,CAFF;AAID,KAjCQ;AAkCTkC,IAAAA,gBAlCS,4BAkCQrC,KAlCR,EAkCe;AACtBA,MAAAA,KAAK,CAACI,aAAN,GAAsB,CAACJ,KAAK,CAACI,aAA7B;AACD,KApCQ;AAqCTkC,IAAAA,mBArCS,+BAqCWtC,KArCX,EAqCkB;AACzB,UAAIA,KAAK,CAACG,aAAN,CAAoBoC,MAApB,IAA8B,CAAlC,EAAqC;AACnCvC,QAAAA,KAAK,CAACK,gBAAN,GAAyB,IAAzB;AACD,OAFD,MAEO,IAAIiB,YAAY,CAACC,OAAb,CAAqB,eAArB,EAAsCgB,MAAtC,KAAiD,CAArD,EAAwD;AAC7DvC,QAAAA,KAAK,CAACK,gBAAN,GAAyB,IAAzB;AACD,OAFM,MAEA;AACLL,QAAAA,KAAK,CAACK,gBAAN,GAAyB,KAAzB;AACD;AACF,KA7CQ;AA8CTmC,IAAAA,kBA9CS,8BA8CUxC,KA9CV,EA8CiByC,IA9CjB,EA8CuB;AAC9BzC,MAAAA,KAAK,CAACG,aAAN,GAAsBH,KAAK,CAACG,aAAN,CAAoBuC,MAApB,CACpB,UAAC3B,EAAD;AAAA,eAAQA,EAAE,CAACc,IAAH,KAAYY,IAApB;AAAA,OADoB,CAAtB;AAIAnB,MAAAA,YAAY,CAACa,OAAb,CACE,eADF,EAEEf,IAAI,CAACgB,SAAL,CAAepC,KAAK,CAACG,aAArB,CAFF;;AAKA,UAAIH,KAAK,CAACG,aAAN,CAAoBoC,MAApB,KAA+B,CAAnC,EAAsC;AACpCvC,QAAAA,KAAK,CAACK,gBAAN,GAAyB,KAAzB;AACAL,QAAAA,KAAK,CAACI,aAAN,GAAsB,KAAtB;AACD;AACF;AA5DQ,GAzBiB;AAuF5BuC,EAAAA,OAAO,EAAE;AACDC,IAAAA,gBADC,kCAC4BH,IAD5B,EACkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAhBI,gBAAAA,MAAgB,QAAhBA,MAAgB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAEdC,KAAK,6DAC2BL,IAD3B,6CAFS;;AAAA;AAE/BM,0BAAAA,QAF+B;AAAA;AAAA,iCAKlBA,QAAQ,CAACC,IAAT,EALkB;;AAAA;AAK/BC,0BAAAA,IAL+B;AAO/BC,0BAAAA,UAP+B,GAOlB,EAPkB;AAQ/BC,0BAAAA,IAR+B,GAQxB,CACX,QADW,EAEX,SAFW,EAGX,WAHW,EAIX,UAJW,EAKX,QALW,EAMX,UANW,EAOX,QAPW,CARwB,EAkBrC;;AAlBqC;AAAA,iCAmBXL,KAAK,wDACmBL,IADnB,4DAnBM;;AAAA;AAmB/BW,0BAAAA,WAnB+B;AAAA;AAAA,iCAsBfA,WAAW,CAACJ,IAAZ,EAtBe;;AAAA;AAsB/BK,0BAAAA,OAtB+B;AAuB/BC,0BAAAA,OAvB+B,GAuBrBD,OAAO,CAACE,OAAR,CAAgB,CAAhB,EAAmBC,IAAnB,CAAwBC,GAvBH,EAyBrC;;AACAR,0BAAAA,IAAI,CAACS,IAAL,CAAU5C,OAAV,CAAkB,UAAC6C,SAAD,EAAe;AAC/B,gCAAMC,gBAAgB,GAAGD,SAAS,CAACE,MAAV,CAAiBC,SAAjB,CAA2B,CAA3B,EAA8B,EAA9B,CAAzB;AACA,gCAAMC,QAAQ,GAAG,IAAIC,IAAJ,CAASJ,gBAAT,EAA2BK,MAA3B,EAAjB;AACA,gCAAMC,OAAO,GAAGH,QAAQ,GAAG,CAAX,IAAgB,CAAhB,GAAoBZ,IAAI,CAACY,QAAQ,GAAG,CAAZ,CAAxB,GAAyCZ,IAAI,CAAC,CAAD,CAA7D;AACAQ,4BAAAA,SAAS,CAACE,MAAV,GAAmBK,OAAnB;AACD,2BALD,EA1BqC,CAiCrC;;AACMC,0BAAAA,WAlC+B,GAkCjBlB,IAAI,CAACS,IAAL,CAAUU,GAAV,CAAc,UAACC,GAAD;AAAA,mCAASA,GAAG,CAACR,MAAb;AAAA,2BAAd,CAlCiB;AAmC/BS,0BAAAA,OAnC+B,sBAmCjB,IAAIC,GAAJ,CAAQJ,WAAR,CAnCiB;AAqC/BK,0BAAAA,UArC+B,GAqClB,EArCkB;;AAAA,iDAuC5BC,CAvC4B;AAwCnC,gCAAMC,iBAAiB,GAAGzB,IAAI,CAACS,IAAL,CAAUhB,MAAV,CACxB,UAACiB,SAAD;AAAA,qCAAeA,SAAS,CAACE,MAAV,KAAqBS,OAAO,CAACG,CAAD,CAA3C;AAAA,6BADwB,CAA1B;AAIA,gCAAME,QAAQ,GAAGD,iBAAiB,CAC/BN,GADc,CACV,UAACC,GAAD;AAAA,qCAASA,GAAG,CAACpD,IAAJ,CAAS2D,QAAlB;AAAA,6BADU,EAEdC,IAFc,CAET,UAACC,CAAD,EAAIC,CAAJ;AAAA,qCAAUD,CAAC,GAAGC,CAAd;AAAA,6BAFS,EAEQ,CAFR,CAAjB;AAIA,gCAAMC,QAAQ,GAAGN,iBAAiB,CAC/BN,GADc,CACV,UAACC,GAAD;AAAA,qCAASA,GAAG,CAACpD,IAAJ,CAASgE,QAAlB;AAAA,6BADU,EAEdJ,IAFc,CAET,UAACC,CAAD,EAAIC,CAAJ;AAAA,qCAAUA,CAAC,GAAGD,CAAd;AAAA,6BAFS,EAEQ,CAFR,CAAjB;AAIA,gCAAII,SAAS,GAAG,EAAhB;AAEAA,4BAAAA,SAAS,GAAG;AACVC,8BAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWV,QAAQ,GAAG,MAAtB,CADK;AAEVW,8BAAAA,GAAG,EAAEF,IAAI,CAACC,KAAL,CAAWL,QAAQ,GAAG,MAAtB;AAFK,6BAAZ;AAKAR,4BAAAA,UAAU,WAAIF,OAAO,CAACG,CAAD,CAAX,EAAV,GAA8BS,SAA9B;AA3DmC;;AAuCrC,+BAAST,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAAC/B,MAA5B,EAAoCkC,CAAC,EAArC,EAAyC;AAAA,kCAAhCA,CAAgC;AAqBxC;;AAEDxB,0BAAAA,IAAI,CAACS,IAAL,CAAUU,GAAV,CAAc,UAACmB,OAAD,EAAUC,KAAV,EAAoB;AAChC;AACA,qCAASC,OAAT,CAAiB9B,SAAjB,EAA4B;AAC1B,kCAAM+B,IAAI,GAAG,IAAI1B,IAAJ,CAASL,SAAS,GAAG,IAArB,CAAb;AACA,kCAAMgC,KAAK,GAAGD,IAAI,CAACE,QAAL,EAAd;AACA,kCAAMC,OAAO,GAAG,MAAMH,IAAI,CAACI,UAAL,EAAtB;AACA,qCAAOH,KAAK,GAAG,GAAR,GAAcE,OAAO,CAACE,MAAR,CAAe,CAAC,CAAhB,CAArB;AACD;;AAED,gCAAMC,OAAO,GAAGP,OAAO,CAACxC,IAAI,CAACR,IAAL,CAAUuD,OAAX,CAAvB;AACA,gCAAMC,MAAM,GAAGR,OAAO,CAACxC,IAAI,CAACR,IAAL,CAAUwD,MAAX,CAAtB;;AAEA,gCAAIT,KAAK,KAAK,CAAV,IAAeA,KAAK,GAAG,CAAR,KAAc,CAAjC,EAAoC;AAClC,kCAAMvF,WAAW,GAAG;AAClByF,gCAAAA,IAAI,EAAEH,OAAO,CAAC1B,MADI;AAElB/B,gCAAAA,QAAQ,EAAE;AACRD,kCAAAA,IAAI,EAAEoB,IAAI,CAACR,IAAL,CAAUZ,IADR;AAERE,kCAAAA,OAAO,EAAEkB,IAAI,CAACR,IAAL,CAAUV;AAFX,iCAFQ;AAMlBf,gCAAAA,WAAW,EAAE;AACXC,kCAAAA,IAAI,EAAEsE,OAAO,CAACtE,IAAR,CAAaiF,IAAb,GAAoB,MADf;AAEXC,kCAAAA,MAAM,EAAE3B,UAAU,CAACe,OAAO,CAAC1B,MAAT;AAFP,iCANK;AAUlBuC,gCAAAA,SAAS,EAAE;AACTnF,kCAAAA,IAAI,EAAEsE,OAAO,CAACc,OAAR,CAAgB,CAAhB,EAAmBpF,IADhB;AAETqF,kCAAAA,WAAW,EAAEf,OAAO,CAACc,OAAR,CAAgB,CAAhB,EAAmBC,WAFvB;AAGTC,kCAAAA,EAAE,EAAEhB,OAAO,CAACc,OAAR,CAAgB,CAAhB,EAAmBE,EAHd;AAITC,kCAAAA,QAAQ,EAAEjB,OAAO,CAACtE,IAAR,CAAauF,QAJd;AAKTC,kCAAAA,QAAQ,EAAElB,OAAO,CAACtE,IAAR,CAAawF,QALd;AAMTC,kCAAAA,aAAa,EAAEnB,OAAO,CAACoB,MAAR,CAAeC,GANrB;AAOTC,kCAAAA,SAAS,EAAEtB,OAAO,CAACuB,IAAR,CAAaC;AAPf,iCAVO;AAmBlBC,gCAAAA,OAAO,EAAE;AACPhB,kCAAAA,OAAO,EAAPA,OADO;AAEPC,kCAAAA,MAAM,EAANA;AAFO,iCAnBS;AAuBlBhE,gCAAAA,KAAK,EAAEqB,OAvBW;AAwBlB2D,gCAAAA,IAAI,EAAE1B,OAAO,CAACc,OAAR,CAAgB,CAAhB,EAAmBY;AAxBP,+BAApB;AA2BA/D,8BAAAA,UAAU,CAAChB,IAAX,CAAgBjC,WAAhB;AACD;AACF,2BA1CD;AA4CA4C,0BAAAA,MAAM,CAAC,gBAAD,EAAmBK,UAAnB,CAAN;;AA1GqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4GrCgE,gBAAAA,KAAK,CAAC,4BAAD,CAAL;;AA5GqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8GxC;AA/GM,GAvFmB;AAwM5BC,EAAAA,OAAO,EAAE;AAxMmB,CAAf,CAAf","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    cityWeather: [],\n    minMaxTemp: [],\n    cityFavorites: [],\n    showFavorites: false,\n    showFavoritesBtn: false,\n  },\n  getters: {\n    getMinMaxTemp(state) {\n      return state.minMaxTemp;\n    },\n    getCityWeather(state) {\n      return state.cityWeather;\n    },\n    getShowFavorites(state) {\n      return state.showFavorites;\n    },\n    getShowFavoritesBtn(state) {\n      return state.showFavoritesBtn;\n    },\n    getCityFavorites(state) {\n      return state.cityFavorites;\n    },\n  },\n  mutations: {\n    setCelsius(state) {\n      state.cityWeather.forEach(\n        (el) => (el.temperature.main = ((el.temperature.main - 32) * 5) / 9)\n      );\n    },\n    setFahrenheit(state) {\n      state.cityWeather.forEach(\n        (el) => (el.temperature.main = (el.temperature.main * 9) / 5 + 32)\n      );\n    },\n    refreshCities(state) {\n      state.cityFavorites = JSON.parse(localStorage.getItem(\"cityFavorites\"));\n    },\n    setCityWeather(state, payload) {\n      state.cityWeather = payload;\n    },\n    setminMaxTemp(state, payload) {\n      state.minMaxTemp = payload;\n    },\n    addCityFavorite(state) {\n      const newFavCity = {\n        name: state.cityWeather[0].location.name,\n        country: state.cityWeather[0].location.country,\n        img: state.cityWeather[0].image,\n      };\n\n      state.cityFavorites.push(newFavCity);\n\n      localStorage.setItem(\n        \"cityFavorites\",\n        JSON.stringify(state.cityFavorites)\n      );\n    },\n    setShowFavorites(state) {\n      state.showFavorites = !state.showFavorites;\n    },\n    setShowFavoritesBtn(state) {\n      if (state.cityFavorites.length >= 1) {\n        state.showFavoritesBtn = true;\n      } else if (localStorage.getItem(\"cityFavorites\").length !== 2) {\n        state.showFavoritesBtn = true;\n      } else {\n        state.showFavoritesBtn = false;\n      }\n    },\n    removeCityFavorite(state, city) {\n      state.cityFavorites = state.cityFavorites.filter(\n        (el) => el.name !== city\n      );\n\n      localStorage.setItem(\n        \"cityFavorites\",\n        JSON.stringify(state.cityFavorites)\n      );\n\n      if (state.cityFavorites.length === 0) {\n        state.showFavoritesBtn = false;\n        state.showFavorites = false;\n      }\n    },\n  },\n  actions: {\n    async fetchCityWeather({ commit }, city) {\n      try {\n        const response = await fetch(\n          `http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=7e918318a291df997bd192ca77406428`\n        );\n        const data = await response.json();\n\n        const weatherArr = [];\n        const days = [\n          \"Monday\",\n          \"Tuesday\",\n          \"Wednesday\",\n          \"Thursday\",\n          \"Friday\",\n          \"Saturday\",\n          \"Sunday\",\n        ];\n\n        // Set city photos\n        const responseImg = await fetch(\n          `https://api.unsplash.com/search/photos?query=${city}&client_id=WlqNLtGT_QMVB2xvS8oyVo6WRZpNf3CL8VSDC5syfVk`\n        );\n        const dataImg = await responseImg.json();\n        const cityImg = dataImg.results[0].urls.raw;\n\n        // Set Date for all\n        data.list.forEach((timestamp) => {\n          const dateApiFormatted = timestamp.dt_txt.substring(0, 10);\n          const dayIndex = new Date(dateApiFormatted).getDay();\n          const weekDay = dayIndex - 1 >= 0 ? days[dayIndex - 1] : days[6];\n          timestamp.dt_txt = weekDay;\n        });\n\n        // Set Min/Max for each day\n        const listAllDays = data.list.map((day) => day.dt_txt);\n        const listDay = [...new Set(listAllDays)];\n\n        const minMaxList = {};\n\n        for (let i = 0; i < listDay.length; i++) {\n          const findCurrentDayArr = data.list.filter(\n            (timestamp) => timestamp.dt_txt === listDay[i]\n          );\n\n          const minValue = findCurrentDayArr\n            .map((day) => day.main.temp_min)\n            .sort((a, b) => a - b)[0];\n\n          const maxValue = findCurrentDayArr\n            .map((day) => day.main.temp_max)\n            .sort((a, b) => b - a)[0];\n\n          let mixMaxDay = {};\n\n          mixMaxDay = {\n            min: Math.trunc(minValue - 273.15),\n            max: Math.trunc(maxValue - 273.15),\n          };\n\n          minMaxList[`${listDay[i]}`] = mixMaxDay;\n        }\n\n        data.list.map((element, index) => {\n          // Set time\n          function setTime(timestamp) {\n            const date = new Date(timestamp * 1000);\n            const hours = date.getHours();\n            const minutes = \"0\" + date.getMinutes();\n            return hours + \":\" + minutes.substr(-2);\n          }\n\n          const sunrise = setTime(data.city.sunrise);\n          const sunset = setTime(data.city.sunset);\n\n          if (index === 0 || index % 8 === 0) {\n            const cityWeather = {\n              date: element.dt_txt,\n              location: {\n                name: data.city.name,\n                country: data.city.country,\n              },\n              temperature: {\n                main: element.main.temp - 273.15,\n                minmax: minMaxList[element.dt_txt],\n              },\n              highlight: {\n                main: element.weather[0].main,\n                description: element.weather[0].description,\n                id: element.weather[0].id,\n                pressure: element.main.pressure,\n                humidity: element.main.humidity,\n                cloudCoverage: element.clouds.all,\n                windSpeed: element.wind.speed,\n              },\n              sunTime: {\n                sunrise,\n                sunset,\n              },\n              image: cityImg,\n              icon: element.weather[0].icon,\n            };\n\n            weatherArr.push(cityWeather);\n          }\n        });\n\n        commit(\"setCityWeather\", weatherArr);\n      } catch (error) {\n        alert(\"Please enter a valid city.\");\n      }\n    },\n  },\n  modules: {},\n});\n"]}]}