{"remainingRequest":"/Users/theogilardo/Desktop/weather-app/node_modules/babel-loader/lib/index.js!/Users/theogilardo/Desktop/weather-app/node_modules/eslint-loader/index.js??ref--13-0!/Users/theogilardo/Desktop/weather-app/src/store/index.js","dependencies":[{"path":"/Users/theogilardo/Desktop/weather-app/src/store/index.js","mtime":1594628562000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/theogilardo/Desktop/weather-app/src/store/index.js"],"names":["Vue","Vuex","use","Store","state","cityWeather","minMaxTemp","cityFavorites","showFavorites","showFavoritesBtn","getters","getMinMaxTemp","getCityWeather","getShowFavorites","getShowFavoritesBtn","getCityFavorites","mutations","setCelsius","forEach","el","temperature","main","setFahrenheit","refreshCities","JSON","parse","localStorage","getItem","setCityWeather","payload","setminMaxTemp","addCityFavorite","newFavCity","name","location","country","img","image","push","setItem","stringify","setShowFavorites","setShowFavoritesBtn","length","removeCityFavorite","city","filter","actions","fetchCityWeather","commit","fetch","response","json","data","weatherArr","responseImg","dataImg","cityImg","results","urls","raw","list","timestamp","dateApiFormatted","dt_txt","substring","dayIndex","Date","getDay","days","weekDay","findCurrentDayArr","minValue","map","day","temp_min","sort","a","b","maxValue","temp_max","minMax","min","max","element","index","setTime","date","hours","getHours","minutes","getMinutes","substr","console","log","sunrise","sunset","temp","minmax","highlight","weather","description","id","pressure","humidity","cloudCoverage","clouds","all","windSpeed","wind","speed","sunTime","icon","alert","modules"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    cityWeather: [],\n    minMaxTemp: [],\n    cityFavorites: [],\n    showFavorites: false,\n    showFavoritesBtn: false,\n  },\n  getters: {\n    getMinMaxTemp(state) {\n      return state.minMaxTemp;\n    },\n    getCityWeather(state) {\n      return state.cityWeather;\n    },\n    getShowFavorites(state) {\n      return state.showFavorites;\n    },\n    getShowFavoritesBtn(state) {\n      return state.showFavoritesBtn;\n    },\n    getCityFavorites(state) {\n      return state.cityFavorites;\n    },\n  },\n  mutations: {\n    setCelsius(state) {\n      state.cityWeather.forEach(\n        (el) => (el.temperature.main = ((el.temperature.main - 32) * 5) / 9)\n      );\n    },\n    setFahrenheit(state) {\n      state.cityWeather.forEach(\n        (el) => (el.temperature.main = (el.temperature.main * 9) / 5 + 32)\n      );\n    },\n    refreshCities(state) {\n      state.cityFavorites = JSON.parse(localStorage.getItem(\"cityFavorites\"));\n    },\n    setCityWeather(state, payload) {\n      state.cityWeather = payload;\n    },\n    setminMaxTemp(state, payload) {\n      state.minMaxTemp = payload;\n    },\n    addCityFavorite(state) {\n      const newFavCity = {\n        name: state.cityWeather[0].location.name,\n        country: state.cityWeather[0].location.country,\n        img: state.cityWeather[0].image,\n      };\n\n      state.cityFavorites.push(newFavCity);\n\n      localStorage.setItem(\n        \"cityFavorites\",\n        JSON.stringify(state.cityFavorites)\n      );\n    },\n    setShowFavorites(state) {\n      state.showFavorites = !state.showFavorites;\n    },\n    setShowFavoritesBtn(state) {\n      if (state.cityFavorites.length >= 1) {\n        state.showFavoritesBtn = true;\n      } else if (localStorage.getItem(\"cityFavorites\").length !== 2) {\n        state.showFavoritesBtn = true;\n      } else {\n        state.showFavoritesBtn = false;\n      }\n    },\n    removeCityFavorite(state, city) {\n      state.cityFavorites = state.cityFavorites.filter(\n        (el) => el.name !== city\n      );\n\n      localStorage.setItem(\n        \"cityFavorites\",\n        JSON.stringify(state.cityFavorites)\n      );\n\n      if (state.cityFavorites.length === 0) {\n        state.showFavoritesBtn = false;\n        state.showFavorites = false;\n      }\n    },\n  },\n  actions: {\n    async fetchCityWeather({ commit }, city) {\n      try {\n        const response = await fetch(\n          `http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=7e918318a291df997bd192ca77406428`\n        );\n        const data = await response.json();\n\n        const weatherArr = [];\n\n        // Set city photos\n        const responseImg = await fetch(\n          `https://api.unsplash.com/search/photos?query=${city}&client_id=WlqNLtGT_QMVB2xvS8oyVo6WRZpNf3CL8VSDC5syfVk`\n        );\n        const dataImg = await responseImg.json();\n        const cityImg = dataImg.results[0].urls.raw;\n\n        // Set Date for all\n        data.list.forEach((timestamp) => {\n          const dateApiFormatted = timestamp.dt_txt.substring(0, 10);\n          const dayIndex = new Date(dateApiFormatted).getDay();\n          const days = [\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\",\n            \"Sunday\",\n          ];\n\n          const weekDay = dayIndex - 1 >= 0 ? days[dayIndex - 1] : days[6];\n          timestamp.dt_txt = weekDay;\n        });\n\n        // Set min/max values\n        const findCurrentDayArr = data.list.filter(\n          (timestamp) => timestamp.dt_txt === data.list[0].dt_txt\n        );\n\n        const minValue = findCurrentDayArr\n          .map((day) => day.main.temp_min)\n          .sort((a, b) => a - b)[0];\n\n        const maxValue = findCurrentDayArr\n          .map((day) => day.main.temp_max)\n          .sort((a, b) => b - a)[0];\n\n        const minMax = {\n          min: minValue - 273.15,\n          max: maxValue - 273.15,\n        };\n\n        data.list.map((element, index) => {\n          // Set time\n          function setTime(timestamp) {\n            const date = new Date(timestamp * 1000);\n            const hours = date.getHours();\n            const minutes = \"0\" + date.getMinutes();\n            return hours + \":\" + minutes.substr(-2);\n          }\n\n          console.log(minMax);\n\n          const sunrise = setTime(data.city.sunrise);\n          const sunset = setTime(data.city.sunset);\n\n          if (index === 0 || index % 8 === 0) {\n            const cityWeather = {\n              date: element.dt_txt,\n              location: {\n                name: data.city.name,\n                country: data.city.country,\n              },\n              temperature: {\n                main: element.main.temp - 273.15,\n                // min: element.main.temp_min - 273.15,\n                // max: element.main.temp_max - 273.15,\n                minmax: minMax,\n              },\n              highlight: {\n                main: element.weather[0].main,\n                description: element.weather[0].description,\n                id: element.weather[0].id,\n                pressure: element.main.pressure,\n                humidity: element.main.humidity,\n                cloudCoverage: element.clouds.all,\n                windSpeed: element.wind.speed,\n              },\n              sunTime: {\n                sunrise,\n                sunset,\n              },\n              image: cityImg,\n              icon: element.weather[0].icon,\n            };\n\n            // console.log(weatherArr);\n            weatherArr.push(cityWeather);\n          }\n        });\n\n        commit(\"setCityWeather\", weatherArr);\n      } catch (error) {\n        alert(error);\n        // alert(\"Please enter a valid city.\");\n      }\n    },\n  },\n  modules: {},\n});\n"]}]}