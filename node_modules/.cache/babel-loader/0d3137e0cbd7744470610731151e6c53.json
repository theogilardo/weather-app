{"remainingRequest":"/Users/theogilardo/Desktop/weather-app/node_modules/babel-loader/lib/index.js!/Users/theogilardo/Desktop/weather-app/node_modules/eslint-loader/index.js??ref--13-0!/Users/theogilardo/Desktop/weather-app/src/store/index.js","dependencies":[{"path":"/Users/theogilardo/Desktop/weather-app/src/store/index.js","mtime":1594401594000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvVXNlcnMvdGhlb2dpbGFyZG8vRGVza3RvcC93ZWF0aGVyLWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBWdWUgZnJvbSAidnVlIjsKaW1wb3J0IFZ1ZXggZnJvbSAidnVleCI7ClZ1ZS51c2UoVnVleCk7CmV4cG9ydCBkZWZhdWx0IG5ldyBWdWV4LlN0b3JlKHsKICBzdGF0ZTogewogICAgY2l0eVdlYXRoZXI6IFtdLAogICAgY2l0eUZhdm9yaXRlczogW10sCiAgICBzaG93RmF2b3JpdGVzOiBmYWxzZSwKICAgIHNob3dGYXZvcml0ZXNCdG46IGZhbHNlCiAgfSwKICBnZXR0ZXJzOiB7CiAgICBnZXRDaXR5V2VhdGhlcjogZnVuY3Rpb24gZ2V0Q2l0eVdlYXRoZXIoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmNpdHlXZWF0aGVyOwogICAgfSwKICAgIGdldFNob3dGYXZvcml0ZXM6IGZ1bmN0aW9uIGdldFNob3dGYXZvcml0ZXMoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLnNob3dGYXZvcml0ZXM7CiAgICB9LAogICAgZ2V0U2hvd0Zhdm9yaXRlc0J0bjogZnVuY3Rpb24gZ2V0U2hvd0Zhdm9yaXRlc0J0bihzdGF0ZSkgewogICAgICByZXR1cm4gc3RhdGUuc2hvd0Zhdm9yaXRlc0J0bjsKICAgIH0sCiAgICBnZXRDaXR5RmF2b3JpdGVzOiBmdW5jdGlvbiBnZXRDaXR5RmF2b3JpdGVzKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZS5jaXR5RmF2b3JpdGVzOwogICAgfQogIH0sCiAgbXV0YXRpb25zOiB7CiAgICBzZXRDaXR5V2VhdGhlcjogZnVuY3Rpb24gc2V0Q2l0eVdlYXRoZXIoc3RhdGUsIHBheWxvYWQpIHsKICAgICAgc3RhdGUuY2l0eVdlYXRoZXIgPSBwYXlsb2FkOyAvLyBjb25zb2xlLmxvZyhzdGF0ZS5jaXR5V2VhdGhlcik7CiAgICB9LAogICAgYWRkQ2l0eUZhdm9yaXRlOiBmdW5jdGlvbiBhZGRDaXR5RmF2b3JpdGUoc3RhdGUpIHsKICAgICAgdmFyIG5ld0ZhdkNpdHkgPSB7CiAgICAgICAgbmFtZTogc3RhdGUuY2l0eVdlYXRoZXJbMF0ubG9jYXRpb24ubmFtZSwKICAgICAgICBjb3VudHJ5OiBzdGF0ZS5jaXR5V2VhdGhlclswXS5sb2NhdGlvbi5jb3VudHJ5CiAgICAgIH07CiAgICAgIHN0YXRlLmNpdHlGYXZvcml0ZXMucHVzaChuZXdGYXZDaXR5KTsKICAgICAgY29uc29sZS5sb2coc3RhdGUuY2l0eUZhdm9yaXRlcyk7CiAgICAgIGNvbnNvbGUubG9nKHN0YXRlLmNpdHlGYXZvcml0ZXMubWFwKGZ1bmN0aW9uIChlbCkgewogICAgICAgIHJldHVybiBlbC5uYW1lOwogICAgICB9KSk7IC8vIGxvY2FsU3RvcmFnZS5zZXRJdGVtKAogICAgICAvLyAgICJjaXR5RmF2b3JpdGVzIiwKICAgICAgLy8gICBKU09OLnN0cmluZ2lmeShzdGF0ZS5jaXR5RmF2b3JpdGVzKQogICAgICAvLyApOwogICAgICAvLyBzdGF0ZS5jaXR5RmF2b3JpdGVzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiY2l0eUZhdm9yaXRlcyIpKTsKICAgIH0sCiAgICBzZXRTaG93RmF2b3JpdGVzOiBmdW5jdGlvbiBzZXRTaG93RmF2b3JpdGVzKHN0YXRlKSB7CiAgICAgIHN0YXRlLnNob3dGYXZvcml0ZXMgPSAhc3RhdGUuc2hvd0Zhdm9yaXRlczsKICAgIH0sCiAgICBzZXRTaG93RmF2b3JpdGVzQnRuOiBmdW5jdGlvbiBzZXRTaG93RmF2b3JpdGVzQnRuKHN0YXRlKSB7CiAgICAgIGlmIChzdGF0ZS5jaXR5RmF2b3JpdGVzLmxlbmd0aCA+PSAxKSB7CiAgICAgICAgc3RhdGUuc2hvd0Zhdm9yaXRlc0J0biA9IHRydWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RhdGUuc2hvd0Zhdm9yaXRlc0J0biA9IGZhbHNlOwogICAgICB9CiAgICB9CiAgfSwKICBhY3Rpb25zOiB7CiAgICBmZXRjaENpdHlXZWF0aGVyOiBmdW5jdGlvbiBmZXRjaENpdHlXZWF0aGVyKF9yZWYsIGNpdHkpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgY29tbWl0LCByZXNwb25zZSwgZGF0YSwgd2VhdGhlckFycjsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKCJodHRwOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS9mb3JlY2FzdD9xPSIuY29uY2F0KGNpdHksICImYXBwaWQ9N2U5MTgzMThhMjkxZGY5OTdiZDE5MmNhNzc0MDY0MjgiKSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgZGF0YSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICAvLyBmdW5jdGlvbiBjb252ZXJ0VG9DZWxjaXVzKGtlbHZpbikgewogICAgICAgICAgICAgICAgLy8gICByZXR1cm4gTWF0aC5yb3VuZChrZWx2aW4gLSAyNzMuMTUpOwogICAgICAgICAgICAgICAgLy8gfQogICAgICAgICAgICAgICAgd2VhdGhlckFyciA9IFtdOwogICAgICAgICAgICAgICAgZGF0YS5saXN0Lm1hcChmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgdmFyIGRhdGVBcGlGb3JtYXR0ZWQgPSBlbGVtZW50LmR0X3R4dC5zdWJzdHJpbmcoMCwgMTApOwogICAgICAgICAgICAgICAgICB2YXIgZGF5SW5kZXggPSBuZXcgRGF0ZShkYXRlQXBpRm9ybWF0dGVkKS5nZXREYXkoKTsKICAgICAgICAgICAgICAgICAgdmFyIGRheXMgPSBbIk1vbmRheSIsICJUdWVzZGF5IiwgIldlZG5lc2RheSIsICJUaHVyc2RheSIsICJGcmlkYXkiLCAiU2F0dXJkYXkiLCAiU3VuZGF5Il07CiAgICAgICAgICAgICAgICAgIHZhciB3ZWVrRGF5ID0gZGF5SW5kZXggLSAxID49IDAgPyBkYXlzW2RheUluZGV4IC0gMV0gOiBkYXlzWzZdOwoKICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSAwIHx8IGluZGV4ICUgOCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGluZGV4KTsKICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhlbGVtZW50LmR0X3R4dCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNpdHlXZWF0aGVyID0gewogICAgICAgICAgICAgICAgICAgICAgZGF0ZTogd2Vla0RheSwKICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGRhdGEuY2l0eS5uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBjb3VudHJ5OiBkYXRhLmNpdHkuY291bnRyeQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1haW46IGVsZW1lbnQubWFpbi50ZW1wLAogICAgICAgICAgICAgICAgICAgICAgICBtaW46IGVsZW1lbnQubWFpbi50ZW1wX21pbiwKICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiBlbGVtZW50Lm1haW4udGVtcF9tYXggLy8gbWFpbjogY29udmVydFRvQ2VsY2l1cyhlbGVtZW50Lm1haW4udGVtcCksCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1pbjogY29udmVydFRvQ2VsY2l1cyhlbGVtZW50Lm1haW4udGVtcF9taW4pLAogICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXg6IGNvbnZlcnRUb0NlbGNpdXMoZWxlbWVudC5tYWluLnRlbXBfbWF4KSwKCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0OiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1haW46IGVsZW1lbnQud2VhdGhlclswXS5tYWluLAogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogZWxlbWVudC53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uLAogICAgICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudC53ZWF0aGVyWzBdLmlkLAogICAgICAgICAgICAgICAgICAgICAgICBwcmVzc3VyZTogZWxlbWVudC5tYWluLnByZXNzdXJlLAogICAgICAgICAgICAgICAgICAgICAgICBodW1pZGl0eTogZWxlbWVudC5tYWluLmh1bWlkaXR5LAogICAgICAgICAgICAgICAgICAgICAgICBjbG91ZENvdmVyYWdlOiBlbGVtZW50LmNsb3Vkcy5hbGwsCiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRTcGVlZDogZWxlbWVudC53aW5kLnNwZWVkCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgaWNvbjogImh0dHA6Ly9vcGVud2VhdGhlcm1hcC5vcmcvaW1nL3cvIi5jb25jYXQoZWxlbWVudC53ZWF0aGVyWzBdLmljb24sICIucG5nIikKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIHdlYXRoZXJBcnIucHVzaChjaXR5V2VhdGhlcik7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgY29tbWl0KCJzZXRDaXR5V2VhdGhlciIsIHdlYXRoZXJBcnIpOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfQogIH0sCiAgbW9kdWxlczoge30KfSk7"},{"version":3,"sources":["/Users/theogilardo/Desktop/weather-app/src/store/index.js"],"names":["Vue","Vuex","use","Store","state","cityWeather","cityFavorites","showFavorites","showFavoritesBtn","getters","getCityWeather","getShowFavorites","getShowFavoritesBtn","getCityFavorites","mutations","setCityWeather","payload","addCityFavorite","newFavCity","name","location","country","push","console","log","map","el","setShowFavorites","setShowFavoritesBtn","length","actions","fetchCityWeather","city","commit","fetch","response","json","data","weatherArr","list","element","index","dateApiFormatted","dt_txt","substring","dayIndex","Date","getDay","days","weekDay","date","temperature","main","temp","min","temp_min","max","temp_max","highlight","weather","description","id","pressure","humidity","cloudCoverage","clouds","all","windSpeed","wind","speed","icon","modules"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    cityWeather: [],\n    cityFavorites: [],\n    showFavorites: false,\n    showFavoritesBtn: false,\n  },\n  getters: {\n    getCityWeather(state) {\n      return state.cityWeather;\n    },\n    getShowFavorites(state) {\n      return state.showFavorites;\n    },\n    getShowFavoritesBtn(state) {\n      return state.showFavoritesBtn;\n    },\n    getCityFavorites(state) {\n      return state.cityFavorites;\n    },\n  },\n  mutations: {\n    setCityWeather(state, payload) {\n      state.cityWeather = payload;\n      // console.log(state.cityWeather);\n    },\n    addCityFavorite(state) {\n      const newFavCity = {\n        name: state.cityWeather[0].location.name,\n        country: state.cityWeather[0].location.country,\n      };\n\n      state.cityFavorites.push(newFavCity);\n      console.log(state.cityFavorites);\n      console.log(state.cityFavorites.map((el) => el.name));\n\n      // localStorage.setItem(\n      //   \"cityFavorites\",\n      //   JSON.stringify(state.cityFavorites)\n      // );\n      // state.cityFavorites = JSON.parse(localStorage.getItem(\"cityFavorites\"));\n    },\n    setShowFavorites(state) {\n      state.showFavorites = !state.showFavorites;\n    },\n    setShowFavoritesBtn(state) {\n      if (state.cityFavorites.length >= 1) {\n        state.showFavoritesBtn = true;\n      } else {\n        state.showFavoritesBtn = false;\n      }\n    },\n  },\n  actions: {\n    async fetchCityWeather({ commit }, city) {\n      const response = await fetch(\n        `http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=7e918318a291df997bd192ca77406428`\n      );\n      const data = await response.json();\n\n      // function convertToCelcius(kelvin) {\n      //   return Math.round(kelvin - 273.15);\n      // }\n\n      const weatherArr = [];\n\n      data.list.map((element, index) => {\n        const dateApiFormatted = element.dt_txt.substring(0, 10);\n        const dayIndex = new Date(dateApiFormatted).getDay();\n        const days = [\n          \"Monday\",\n          \"Tuesday\",\n          \"Wednesday\",\n          \"Thursday\",\n          \"Friday\",\n          \"Saturday\",\n          \"Sunday\",\n        ];\n\n        const weekDay = dayIndex - 1 >= 0 ? days[dayIndex - 1] : days[6];\n\n        if (index === 0 || index % 8 === 0) {\n          // console.log(index);\n          // console.log(element.dt_txt);\n\n          const cityWeather = {\n            date: weekDay,\n            location: {\n              name: data.city.name,\n              country: data.city.country,\n            },\n\n            temperature: {\n              main: element.main.temp,\n              min: element.main.temp_min,\n              max: element.main.temp_max,\n              // main: convertToCelcius(element.main.temp),\n              // min: convertToCelcius(element.main.temp_min),\n              // max: convertToCelcius(element.main.temp_max),\n            },\n\n            highlight: {\n              main: element.weather[0].main,\n              description: element.weather[0].description,\n              id: element.weather[0].id,\n              pressure: element.main.pressure,\n              humidity: element.main.humidity,\n              cloudCoverage: element.clouds.all,\n              windSpeed: element.wind.speed,\n            },\n            icon: `http://openweathermap.org/img/w/${element.weather[0].icon}.png`,\n          };\n\n          weatherArr.push(cityWeather);\n        }\n      });\n\n      commit(\"setCityWeather\", weatherArr);\n    },\n  },\n  modules: {},\n});\n"]}]}