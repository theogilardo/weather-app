{"remainingRequest":"/Users/theogilardo/Desktop/weather-app/node_modules/babel-loader/lib/index.js!/Users/theogilardo/Desktop/weather-app/node_modules/eslint-loader/index.js??ref--13-0!/Users/theogilardo/Desktop/weather-app/src/store/index.js","dependencies":[{"path":"/Users/theogilardo/Desktop/weather-app/src/store/index.js","mtime":1594848165000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/theogilardo/Desktop/weather-app/src/store/index.js"],"names":["Vue","Vuex","use","Store","state","cityWeather","minMaxTemp","cityFavorites","showFavorites","showFavoritesBtn","getters","getMinMaxTemp","getCityWeather","getTimeline","currentDay","map","el","date","currentFilter","filter","getWeekWeather","week","day","index","push","getShowFavorites","getShowFavoritesBtn","getCityFavorites","mutations","setCelsius","forEach","temperature","main","minmax","min","max","setFahrenheit","refreshCities","JSON","parse","localStorage","getItem","setCityWeather","payload","setItem","stringify","setminMaxTemp","addCityFavorite","newFavCity","name","location","country","img","image","setShowFavorites","setShowFavoritesBtn","length","removeCityFavorite","city","actions","fetchCityWeather","commit","fetch","response","json","data","weatherArr","days","responseImg","dataImg","cityImg","results","urls","raw","list","timestamp","dateApiFormatted","dt_txt","substring","timeApiFormatted","dayIndex","Date","getDay","weekDay","time","listAllDays","listDay","Set","minMaxList","i","findCurrentDayArr","minValue","temp_min","sort","a","b","maxValue","temp_max","minMaxDay","element","setTime","hours","getHours","minutes","getMinutes","substr","sunrise","sunset","temp","highlight","weather","description","id","pressure","humidity","cloudCoverage","clouds","all","windSpeed","wind","speed","sunTime","icon","alert","modules"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    cityWeather: [],\n    minMaxTemp: [],\n    cityFavorites: [],\n    showFavorites: false,\n    showFavoritesBtn: false,\n  },\n  getters: {\n    getMinMaxTemp(state) {\n      return state.minMaxTemp;\n    },\n    getCityWeather(state) {\n      return state.cityWeather;\n    },\n    getTimeline(state) {\n      // Get each time period of the current day\n      const currentDay = state.cityWeather.map((el) => el.date)[0];\n      const currentFilter = state.cityWeather.filter(\n        (el) => el.date === currentDay\n      );\n      return currentFilter;\n    },\n    getWeekWeather(state) {\n      const week = [];\n      // Get each day of the week at a specific time (there are 8 time periods a day for a total of 5 days)\n      state.cityWeather.map((day, index) => {\n        if (index === 0 || index % 8 === 0) {\n          week.push(day);\n        }\n      });\n\n      return week;\n    },\n    getShowFavorites(state) {\n      return state.showFavorites;\n    },\n    getShowFavoritesBtn(state) {\n      return state.showFavoritesBtn;\n    },\n    getCityFavorites(state) {\n      return state.cityFavorites;\n    },\n  },\n  mutations: {\n    setCelsius(state) {\n      state.cityWeather.forEach((el, index) => {\n        el.temperature.main = ((el.temperature.main - 32) * 5) / 9;\n        if (index === 0 || index % 8 === 0) {\n          el.temperature.minmax.min =\n            ((el.temperature.minmax.min - 32) * 5) / 9;\n          el.temperature.minmax.max =\n            ((el.temperature.minmax.max - 32) * 5) / 9;\n        }\n      });\n    },\n    setFahrenheit(state) {\n      state.cityWeather.forEach((el, index) => {\n        el.temperature.main = (el.temperature.main * 9) / 5 + 32;\n        if (index === 0 || index % 8 === 0) {\n          el.temperature.minmax.min = (el.temperature.minmax.min * 9) / 5 + 32;\n          el.temperature.minmax.max = (el.temperature.minmax.max * 9) / 5 + 32;\n        }\n      });\n    },\n    refreshCities(state) {\n      state.cityFavorites = JSON.parse(localStorage.getItem(\"cityFavorites\"));\n    },\n    setCityWeather(state, payload) {\n      localStorage.setItem(\"activeCity\", JSON.stringify(payload));\n      state.cityWeather = payload;\n    },\n    setminMaxTemp(state, payload) {\n      state.minMaxTemp = payload;\n    },\n    addCityFavorite(state) {\n      const newFavCity = {\n        name: state.cityWeather[0].location.name,\n        country: state.cityWeather[0].location.country,\n        img: state.cityWeather[0].image,\n      };\n\n      state.cityFavorites.push(newFavCity);\n\n      localStorage.setItem(\n        \"cityFavorites\",\n        JSON.stringify(state.cityFavorites)\n      );\n    },\n    setShowFavorites(state) {\n      state.showFavorites = !state.showFavorites;\n    },\n    setShowFavoritesBtn(state) {\n      if (state.cityFavorites.length >= 1) {\n        state.showFavoritesBtn = true;\n      } else if (localStorage.getItem(\"cityFavorites\").length !== 2) {\n        state.showFavoritesBtn = true;\n      } else {\n        state.showFavoritesBtn = false;\n      }\n    },\n    removeCityFavorite(state, city) {\n      state.cityFavorites = state.cityFavorites.filter(\n        (el) => el.name !== city\n      );\n\n      localStorage.setItem(\n        \"cityFavorites\",\n        JSON.stringify(state.cityFavorites)\n      );\n\n      if (state.cityFavorites.length === 0) {\n        state.showFavoritesBtn = false;\n        state.showFavorites = false;\n      }\n    },\n  },\n  actions: {\n    async fetchCityWeather({ commit }, city) {\n      try {\n        const response = await fetch(\n          `http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=7e918318a291df997bd192ca77406428`\n        );\n        const data = await response.json();\n\n        const weatherArr = [];\n        const days = [\n          \"Monday\",\n          \"Tuesday\",\n          \"Wednesday\",\n          \"Thursday\",\n          \"Friday\",\n          \"Saturday\",\n          \"Sunday\",\n        ];\n\n        // Fetch city photos from Unsplash API\n        const responseImg = await fetch(\n          `https://api.unsplash.com/search/photos?query=${city}&client_id=WlqNLtGT_QMVB2xvS8oyVo6WRZpNf3CL8VSDC5syfVk`\n        );\n        const dataImg = await responseImg.json();\n        const cityImg = dataImg.results[0].urls.raw;\n\n        // Format Date from API \"2020-07-11 21:00:00\"\n        data.list.forEach((timestamp) => {\n          const dateApiFormatted = timestamp.dt_txt.substring(0, 10);\n          const timeApiFormatted = timestamp.dt_txt.substring(11, 16);\n          const dayIndex = new Date(dateApiFormatted).getDay();\n          const weekDay = dayIndex - 1 >= 0 ? days[dayIndex - 1] : days[6];\n\n          // \"2020-07-11 21:00:00\" -> \"Saturday\"\n          timestamp.dt_txt = weekDay;\n\n          // \"2020-07-12 21:00:00\" -> \"21:00\"\n          timestamp.time = timeApiFormatted;\n        });\n\n        // Set Min/Max for each day\n        // Retrieve all days available in new array -> [\"Monday\", \"Monday\", \"Tuesday\"..]\n        const listAllDays = data.list.map((day) => day.dt_txt);\n\n        // Format array for unique days\n        const listDay = [...new Set(listAllDays)];\n\n        // Set new object where min/max will be stored\n        const minMaxList = {};\n\n        // Loop for each day available in listDay array\n        for (let i = 0; i < listDay.length; i++) {\n          // Pick one day available, collect all its timeperiods (12:00, 15:00, 18:00 ..)\n          const findCurrentDayArr = data.list.filter(\n            (timestamp) => timestamp.dt_txt === listDay[i]\n          );\n\n          // Retrieve the min values from the timeperiods of the day and find the lowest number\n          const minValue = findCurrentDayArr\n            .map((day) => day.main.temp_min)\n            .sort((a, b) => a - b)[0];\n\n          // Retrieve the max values from the timeperiods of the day and find the biggest number\n          const maxValue = findCurrentDayArr\n            .map((day) => day.main.temp_max)\n            .sort((a, b) => b - a)[0];\n\n          let minMaxDay = {};\n\n          // Convert from Kelvin to °C and store values in an object\n          minMaxDay = {\n            min: minValue - 273.15,\n            max: maxValue - 273.15,\n          };\n\n          // Store the min/max values for each day in the minMaxList object\n          minMaxList[`${listDay[i]}`] = minMaxDay;\n        }\n\n        data.list.map((element) => {\n          // Set Sunrise and Sunset time\n          function setTime(timestamp) {\n            const date = new Date(timestamp * 1000);\n            const hours = date.getHours();\n            const minutes = \"0\" + date.getMinutes();\n            return hours + \":\" + minutes.substr(-2);\n          }\n\n          const sunrise = setTime(data.city.sunrise);\n          const sunset = setTime(data.city.sunset);\n\n          // Store all the data formated in a new object\n          const cityWeather = {\n            date: element.dt_txt,\n            time: element.time,\n            location: {\n              name: data.city.name,\n              country: data.city.country,\n            },\n            temperature: {\n              main: element.main.temp - 273.15,\n              minmax: minMaxList[element.dt_txt],\n            },\n            highlight: {\n              main: element.weather[0].main,\n              description: element.weather[0].description,\n              id: element.weather[0].id,\n              pressure: element.main.pressure,\n              humidity: element.main.humidity,\n              cloudCoverage: element.clouds.all,\n              windSpeed: element.wind.speed,\n            },\n            sunTime: {\n              sunrise,\n              sunset,\n            },\n            image: cityImg,\n            icon: element.weather[0].icon,\n          };\n\n          // Store cityWeather object in weather array before commiting it to the state\n          weatherArr.push(cityWeather);\n        });\n\n        commit(\"setCityWeather\", weatherArr);\n      } catch (error) {\n        alert(\"Please enter a valid city.\");\n      }\n    },\n  },\n  modules: {},\n});\n"]}]}