{"remainingRequest":"/Users/theogilardo/Desktop/weather-app/node_modules/babel-loader/lib/index.js!/Users/theogilardo/Desktop/weather-app/node_modules/eslint-loader/index.js??ref--13-0!/Users/theogilardo/Desktop/weather-app/src/store/index.js","dependencies":[{"path":"/Users/theogilardo/Desktop/weather-app/src/store/index.js","mtime":1594329163000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmciOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvVXNlcnMvdGhlb2dpbGFyZG8vRGVza3RvcC93ZWF0aGVyLWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBWdWUgZnJvbSAidnVlIjsKaW1wb3J0IFZ1ZXggZnJvbSAidnVleCI7ClZ1ZS51c2UoVnVleCk7CmV4cG9ydCBkZWZhdWx0IG5ldyBWdWV4LlN0b3JlKHsKICBzdGF0ZTogewogICAgY2l0eVdlYXRoZXI6IFtdCiAgfSwKICBnZXR0ZXJzOiB7CiAgICBjaXR5V2VhdGhlcjogZnVuY3Rpb24gY2l0eVdlYXRoZXIoc3RhdGUpIHsKICAgICAgcmV0dXJuIHN0YXRlLmNpdHlXZWF0aGVyOwogICAgfQogIH0sCiAgbXV0YXRpb25zOiB7CiAgICBzZXRDaXR5V2VhdGhlcjogZnVuY3Rpb24gc2V0Q2l0eVdlYXRoZXIoc3RhdGUsIHBheWxvYWQpIHsKICAgICAgc3RhdGUuY2l0eVdlYXRoZXIgPSBwYXlsb2FkOwogICAgfQogIH0sCiAgYWN0aW9uczogewogICAgZmV0Y2hDaXR5V2VhdGhlcjogZnVuY3Rpb24gZmV0Y2hDaXR5V2VhdGhlcihfcmVmKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgcmVzcG9uc2UsIGRhdGEsIGNvbnZlcnRUb0NlbGNpdXMsIGRhdGVGb3JtYXR0ZWQsIGRheSwgY2l0eVdlYXRoZXI7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29udmVydFRvQ2VsY2l1cyA9IGZ1bmN0aW9uIF9jb252ZXJ0VG9DZWxjaXVzKGtlbHZpbikgewogICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChrZWx2aW4gLSAyNzMuMTUpOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKCJodHRwOi8vYXBpLm9wZW53ZWF0aGVybWFwLm9yZy9kYXRhLzIuNS9mb3JlY2FzdD9xPXN5ZG5leSZhcHBpZD03ZTkxODMxOGEyOTFkZjk5N2JkMTkyY2E3NzQwNjQyOCIpOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIGRhdGEgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgZGF0ZUZvcm1hdHRlZCA9IGNpdHlXZWF0aGVyLmRhdGUuc3Vic3RyaW5nKDAsIDEwKTsKICAgICAgICAgICAgICAgIGRheSA9IG5ldyBEYXRlKGRhdGVGb3JtYXR0ZWQpLmdldERheSgpOwogICAgICAgICAgICAgICAgY2l0eVdlYXRoZXIgPSB7CiAgICAgICAgICAgICAgICAgIC8vIGRhdGU6IGRhdGEubGlzdFswXS5kdF90eHQsCiAgICAgICAgICAgICAgICAgIGRhdGU6IGRheSwKICAgICAgICAgICAgICAgICAgbG9jYXRpb246IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiBkYXRhLmNpdHkubmFtZSwKICAgICAgICAgICAgICAgICAgICBjb3VudHJ5OiBkYXRhLmNpdHkuY291bnRyeQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZTogewogICAgICAgICAgICAgICAgICAgIC8vIG1haW46IGRhdGEubGlzdFswXS5tYWluLnRlbXAsCiAgICAgICAgICAgICAgICAgICAgLy8gbWluOiBkYXRhLmxpc3RbMF0ubWFpbi50ZW1wX21pbiwKICAgICAgICAgICAgICAgICAgICAvLyBtYXg6IGRhdGEubGlzdFswXS5tYWluLnRlbXBfbWF4LAogICAgICAgICAgICAgICAgICAgIG1haW46IGNvbnZlcnRUb0NlbGNpdXMoZGF0YS5saXN0WzBdLm1haW4udGVtcCksCiAgICAgICAgICAgICAgICAgICAgbWluOiBjb252ZXJ0VG9DZWxjaXVzKGRhdGEubGlzdFswXS5tYWluLnRlbXBfbWluKSwKICAgICAgICAgICAgICAgICAgICBtYXg6IGNvbnZlcnRUb0NlbGNpdXMoZGF0YS5saXN0WzBdLm1haW4udGVtcF9tYXgpCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodDogewogICAgICAgICAgICAgICAgICAgIG1haW46IGRhdGEubGlzdFswXS53ZWF0aGVyWzBdLm1haW4sCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IGRhdGEubGlzdFswXS53ZWF0aGVyWzBdLmRlc2NyaXB0aW9uLAogICAgICAgICAgICAgICAgICAgIGlkOiBkYXRhLmxpc3RbMF0ud2VhdGhlclswXS5pZCwKICAgICAgICAgICAgICAgICAgICBwcmVzc3VyZTogZGF0YS5saXN0WzBdLm1haW4ucHJlc3N1cmUsCiAgICAgICAgICAgICAgICAgICAgaHVtaWRpdHk6IGRhdGEubGlzdFswXS5tYWluLmh1bWlkaXR5LAogICAgICAgICAgICAgICAgICAgIGNsb3VkQ292ZXJhZ2U6IGRhdGEubGlzdFswXS5jbG91ZHMuYWxsLAogICAgICAgICAgICAgICAgICAgIHdpbmRTcGVlZDogZGF0YS5saXN0WzBdLndpbmQuc3BlZWQKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgaWNvbjogImh0dHA6Ly9vcGVud2VhdGhlcm1hcC5vcmcvaW1nL3cvIi5jb25jYXQoZGF0YS5saXN0WzBdLndlYXRoZXJbMF0uaWNvbiwgIi5wbmciKQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGNvbW1pdCgic2V0Q2l0eVdlYXRoZXIiLCBjaXR5V2VhdGhlcik7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfSwKICBtb2R1bGVzOiB7fQp9KTs="},{"version":3,"sources":["/Users/theogilardo/Desktop/weather-app/src/store/index.js"],"names":["Vue","Vuex","use","Store","state","cityWeather","getters","mutations","setCityWeather","payload","actions","fetchCityWeather","convertToCelcius","kelvin","Math","round","commit","fetch","response","json","data","dateFormatted","date","substring","day","Date","getDay","location","name","city","country","temperature","main","list","temp","min","temp_min","max","temp_max","highlight","weather","description","id","pressure","humidity","cloudCoverage","clouds","all","windSpeed","wind","speed","icon","modules"],"mappings":";;;;;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR;AAEA,eAAe,IAAIA,IAAI,CAACE,KAAT,CAAe;AAC5BC,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE;AADR,GADqB;AAI5BC,EAAAA,OAAO,EAAE;AACPD,IAAAA,WADO,uBACKD,KADL,EACY;AACjB,aAAOA,KAAK,CAACC,WAAb;AACD;AAHM,GAJmB;AAS5BE,EAAAA,SAAS,EAAE;AACTC,IAAAA,cADS,0BACMJ,KADN,EACaK,OADb,EACsB;AAC7BL,MAAAA,KAAK,CAACC,WAAN,GAAoBI,OAApB;AACD;AAHQ,GATiB;AAc5BC,EAAAA,OAAO,EAAE;AACDC,IAAAA,gBADC,kCAC4B;AAAA;AAAA,oCAMxBC,gBANwB;AAAA;AAAA;AAAA;AAAA;AAMxBA,gBAAAA,gBANwB,8BAMPC,MANO,EAMC;AAChC,yBAAOC,IAAI,CAACC,KAAL,CAAWF,MAAM,GAAG,MAApB,CAAP;AACD,iBARgC;;AAAVG,gBAAAA,MAAU,QAAVA,MAAU;AAAA;AAAA,uBACVC,KAAK,mGADK;;AAAA;AAC3BC,gBAAAA,QAD2B;AAAA;AAAA,uBAIdA,QAAQ,CAACC,IAAT,EAJc;;AAAA;AAI3BC,gBAAAA,IAJ2B;AAU3BC,gBAAAA,aAV2B,GAUXhB,WAAW,CAACiB,IAAZ,CAAiBC,SAAjB,CAA2B,CAA3B,EAA8B,EAA9B,CAVW;AAW3BC,gBAAAA,GAX2B,GAWrB,IAAIC,IAAJ,CAASJ,aAAT,EAAwBK,MAAxB,EAXqB;AAa3BrB,gBAAAA,WAb2B,GAab;AAClB;AACAiB,kBAAAA,IAAI,EAAEE,GAFY;AAGlBG,kBAAAA,QAAQ,EAAE;AACRC,oBAAAA,IAAI,EAAER,IAAI,CAACS,IAAL,CAAUD,IADR;AAERE,oBAAAA,OAAO,EAAEV,IAAI,CAACS,IAAL,CAAUC;AAFX,mBAHQ;AAQlBC,kBAAAA,WAAW,EAAE;AACX;AACA;AACA;AACAC,oBAAAA,IAAI,EAAEpB,gBAAgB,CAACQ,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaD,IAAb,CAAkBE,IAAnB,CAJX;AAKXC,oBAAAA,GAAG,EAAEvB,gBAAgB,CAACQ,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaD,IAAb,CAAkBI,QAAnB,CALV;AAMXC,oBAAAA,GAAG,EAAEzB,gBAAgB,CAACQ,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaD,IAAb,CAAkBM,QAAnB;AANV,mBARK;AAiBlBC,kBAAAA,SAAS,EAAE;AACTP,oBAAAA,IAAI,EAAEZ,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaO,OAAb,CAAqB,CAArB,EAAwBR,IADrB;AAETS,oBAAAA,WAAW,EAAErB,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaO,OAAb,CAAqB,CAArB,EAAwBC,WAF5B;AAGTC,oBAAAA,EAAE,EAAEtB,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaO,OAAb,CAAqB,CAArB,EAAwBE,EAHnB;AAITC,oBAAAA,QAAQ,EAAEvB,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaD,IAAb,CAAkBW,QAJnB;AAKTC,oBAAAA,QAAQ,EAAExB,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaD,IAAb,CAAkBY,QALnB;AAMTC,oBAAAA,aAAa,EAAEzB,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaa,MAAb,CAAoBC,GAN1B;AAOTC,oBAAAA,SAAS,EAAE5B,IAAI,CAACa,IAAL,CAAU,CAAV,EAAagB,IAAb,CAAkBC;AAPpB,mBAjBO;AA0BlBC,kBAAAA,IAAI,4CAAqC/B,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaO,OAAb,CAAqB,CAArB,EAAwBW,IAA7D;AA1Bc,iBAba;AA0CjCnC,gBAAAA,MAAM,CAAC,gBAAD,EAAmBX,WAAnB,CAAN;;AA1CiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2ClC;AA5CM,GAdmB;AA4D5B+C,EAAAA,OAAO,EAAE;AA5DmB,CAAf,CAAf","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    cityWeather: [],\n  },\n  getters: {\n    cityWeather(state) {\n      return state.cityWeather;\n    },\n  },\n  mutations: {\n    setCityWeather(state, payload) {\n      state.cityWeather = payload;\n    },\n  },\n  actions: {\n    async fetchCityWeather({ commit }) {\n      const response = await fetch(\n        `http://api.openweathermap.org/data/2.5/forecast?q=sydney&appid=7e918318a291df997bd192ca77406428`\n      );\n      const data = await response.json();\n\n      function convertToCelcius(kelvin) {\n        return Math.round(kelvin - 273.15);\n      }\n\n      const dateFormatted = cityWeather.date.substring(0, 10);\n      const day = new Date(dateFormatted).getDay();\n\n      const cityWeather = {\n        // date: data.list[0].dt_txt,\n        date: day,\n        location: {\n          name: data.city.name,\n          country: data.city.country,\n        },\n\n        temperature: {\n          // main: data.list[0].main.temp,\n          // min: data.list[0].main.temp_min,\n          // max: data.list[0].main.temp_max,\n          main: convertToCelcius(data.list[0].main.temp),\n          min: convertToCelcius(data.list[0].main.temp_min),\n          max: convertToCelcius(data.list[0].main.temp_max),\n        },\n\n        highlight: {\n          main: data.list[0].weather[0].main,\n          description: data.list[0].weather[0].description,\n          id: data.list[0].weather[0].id,\n          pressure: data.list[0].main.pressure,\n          humidity: data.list[0].main.humidity,\n          cloudCoverage: data.list[0].clouds.all,\n          windSpeed: data.list[0].wind.speed,\n        },\n        icon: `http://openweathermap.org/img/w/${data.list[0].weather[0].icon}.png`,\n      };\n\n      commit(\"setCityWeather\", cityWeather);\n    },\n  },\n  modules: {},\n});\n"]}]}