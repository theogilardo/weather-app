{"remainingRequest":"/Users/theogilardo/Desktop/weather-app/node_modules/babel-loader/lib/index.js!/Users/theogilardo/Desktop/weather-app/node_modules/eslint-loader/index.js??ref--13-0!/Users/theogilardo/Desktop/weather-app/src/store/index.js","dependencies":[{"path":"/Users/theogilardo/Desktop/weather-app/src/store/index.js","mtime":1594564026000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/theogilardo/Desktop/weather-app/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/theogilardo/Desktop/weather-app/src/store/index.js"],"names":["Vue","Vuex","use","Store","state","cityWeather","cityFavorites","showFavorites","showFavoritesBtn","getters","getCityWeather","getShowFavorites","getShowFavoritesBtn","getCityFavorites","mutations","setCelsius","forEach","el","temperature","main","setFahrenheit","refreshCities","JSON","parse","localStorage","getItem","setCityWeather","payload","addCityFavorite","newFavCity","name","location","country","img","image","push","setItem","stringify","setShowFavorites","setShowFavoritesBtn","length","removeCityFavorite","city","filter","actions","fetchCityWeather","commit","fetch","response","json","data","weatherArr","responseImg","dataImg","cityImg","results","urls","raw","list","map","element","index","dateApiFormatted","dt_txt","substring","dayIndex","Date","getDay","days","weekDay","date","temp","min","temp_min","max","temp_max","highlight","weather","description","id","pressure","humidity","cloudCoverage","clouds","all","windSpeed","wind","speed","icon","alert","modules"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\n\nVue.use(Vuex);\n\nexport default new Vuex.Store({\n  state: {\n    cityWeather: [],\n    cityFavorites: [],\n    showFavorites: false,\n    showFavoritesBtn: false,\n  },\n  getters: {\n    getCityWeather(state) {\n      return state.cityWeather;\n    },\n    getShowFavorites(state) {\n      return state.showFavorites;\n    },\n    getShowFavoritesBtn(state) {\n      return state.showFavoritesBtn;\n    },\n    getCityFavorites(state) {\n      return state.cityFavorites;\n    },\n  },\n  mutations: {\n    setCelsius(state) {\n      state.cityWeather.forEach(\n        (el) => (el.temperature.main = ((el.temperature.main - 32) * 5) / 9)\n      );\n    },\n    setFahrenheit(state) {\n      state.cityWeather.forEach(\n        (el) => (el.temperature.main = (el.temperature.main * 9) / 5 + 32)\n      );\n    },\n    refreshCities(state) {\n      state.cityFavorites = JSON.parse(localStorage.getItem(\"cityFavorites\"));\n    },\n    setCityWeather(state, payload) {\n      state.cityWeather = payload;\n    },\n    addCityFavorite(state) {\n      const newFavCity = {\n        name: state.cityWeather[0].location.name,\n        country: state.cityWeather[0].location.country,\n        img: state.cityWeather[0].image,\n      };\n\n      state.cityFavorites.push(newFavCity);\n\n      localStorage.setItem(\n        \"cityFavorites\",\n        JSON.stringify(state.cityFavorites)\n      );\n    },\n    setShowFavorites(state) {\n      state.showFavorites = !state.showFavorites;\n    },\n    setShowFavoritesBtn(state) {\n      if (state.cityFavorites.length >= 1) {\n        state.showFavoritesBtn = true;\n      } else if (localStorage.getItem(\"cityFavorites\").length !== 2) {\n        state.showFavoritesBtn = true;\n      } else {\n        state.showFavoritesBtn = false;\n      }\n    },\n    removeCityFavorite(state, city) {\n      state.cityFavorites = state.cityFavorites.filter(\n        (el) => el.name !== city\n      );\n\n      localStorage.setItem(\n        \"cityFavorites\",\n        JSON.stringify(state.cityFavorites)\n      );\n\n      if (state.cityFavorites.length === 0) {\n        state.showFavoritesBtn = false;\n        state.showFavorites = false;\n      }\n    },\n  },\n  actions: {\n    async fetchCityWeather({ commit }, city) {\n      try {\n        const response = await fetch(\n          `http://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=7e918318a291df997bd192ca77406428`\n        );\n        const data = await response.json();\n\n        const weatherArr = [];\n\n        const responseImg = await fetch(\n          `https://api.unsplash.com/search/photos?query=${city}&client_id=WlqNLtGT_QMVB2xvS8oyVo6WRZpNf3CL8VSDC5syfVk`\n        );\n        const dataImg = await responseImg.json();\n        const cityImg = dataImg.results[0].urls.raw;\n\n        data.list.map((element, index) => {\n          const dateApiFormatted = element.dt_txt.substring(0, 10);\n          const dayIndex = new Date(dateApiFormatted).getDay();\n          const days = [\n            \"Monday\",\n            \"Tuesday\",\n            \"Wednesday\",\n            \"Thursday\",\n            \"Friday\",\n            \"Saturday\",\n            \"Sunday\",\n          ];\n\n          const weekDay = dayIndex - 1 >= 0 ? days[dayIndex - 1] : days[6];\n\n          if (index === 0 || index % 8 === 0) {\n            const cityWeather = {\n              date: weekDay,\n              location: {\n                name: data.city.name,\n                country: data.city.country,\n              },\n              temperature: {\n                main: element.main.temp - 273.15,\n                min: element.main.temp_min - 273.15,\n                max: element.main.temp_max - 273.15,\n              },\n              highlight: {\n                main: element.weather[0].main,\n                description: element.weather[0].description,\n                id: element.weather[0].id,\n                pressure: element.main.pressure,\n                humidity: element.main.humidity,\n                cloudCoverage: element.clouds.all,\n                windSpeed: element.wind.speed,\n              },\n              image: cityImg,\n              icon: `http://openweathermap.org/img/w/${element.weather[0].icon}.png`,\n            };\n\n            weatherArr.push(cityWeather);\n          }\n        });\n\n        commit(\"setCityWeather\", weatherArr);\n      } catch (error) {\n        alert(\"Please enter a valid city.\");\n      }\n    },\n  },\n  modules: {},\n});\n"]}]}